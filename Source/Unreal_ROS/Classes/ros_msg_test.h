#pragma once

/** THIS FILE WAS AUTO-GENERATED BY UNREAL-ROS-PLUGIN
 *         DO NOT EDIT THIS FILE BY HAND
 *  
 *  To make changes, please see Tools/FStructTemplate.h.template and FStructTemplate.cpp.template
 *  which serve as templates.
 * 
 *  Auto-generation done by generate_msg_template.py
 * 
 *  To add new supported types, see Tools/data, where type definitions reside.
 * 
 * 
 *  This file holds type definitions for ROS types, and code to populate them from JSON.
 * */

#include "Unreal_ROS.h"
#include "TopicTemplate.h"
#include <string>
#include <rapidjson/document.h>
#include <rapidjson/rapidjson.h>
#include "ros_msg_test.generated.h"

struct  F_std_msgs_Int16;
struct  F_geometry_msgs_Point32;
struct  F_sensor_msgs_JoyFeedbackArray;
struct  F_sensor_msgs_PointField;
struct  F_sensor_msgs_LaserEcho;
struct  F_std_msgs_Byte;
struct  F_std_msgs_Int32;
struct  F_std_msgs_UInt32;
struct  F_geometry_msgs_Polygon;
struct  F_std_msgs_Char;
struct  F_sensor_msgs_NavSatStatus;
struct  F_std_msgs_Int64;
struct  F_std_msgs_ColorRGBA;
struct  F_std_msgs_UInt64;
struct  F_std_msgs_Duration;
struct  F_actionlib_msgs_GoalID;
struct  F_actionlib_msgs_GoalStatus;
struct  F_geometry_msgs_Pose2D;
struct  F_std_msgs_Int8;
struct  F_std_msgs_Empty;
struct  F_std_msgs_UInt8;
struct  F_geometry_msgs_Vector3;
struct  F_geometry_msgs_Accel;
struct  F_geometry_msgs_Twist;
struct  F_geometry_msgs_AccelWithCovariance;
struct  F_geometry_msgs_TwistWithCovariance;
struct  F_std_msgs_Float32;
struct  F_sensor_msgs_RegionOfInterest;
struct  F_geometry_msgs_Inertia;
struct  F_std_msgs_MultiArrayDimension;
struct  F_trajectory_msgs_JointTrajectoryPoint;
struct  F_std_msgs_UInt16;
struct  F_std_msgs_Float64;
struct  F_std_msgs_MultiArrayLayout;
struct  F_std_msgs_UInt16MultiArray;
struct  F_std_msgs_Int16MultiArray;
struct  F_std_msgs_ByteMultiArray;
struct  F_std_msgs_Int32MultiArray;
struct  F_std_msgs_UInt32MultiArray;
struct  F_std_msgs_Int64MultiArray;
struct  F_std_msgs_UInt64MultiArray;
struct  F_std_msgs_Int8MultiArray;
struct  F_std_msgs_UInt8MultiArray;
struct  F_std_msgs_Float32MultiArray;
struct  F_geometry_msgs_Wrench;
struct  F_std_msgs_Float64MultiArray;
struct  F_sensor_msgs_ChannelFloat32;
struct  F_std_msgs_Bool;
struct  F_geometry_msgs_Quaternion;
struct  F_geometry_msgs_Transform;
struct  F_trajectory_msgs_MultiDOFJointTrajectoryPoint;
struct  F_std_msgs_String;
struct  F_std_msgs_Time;
struct  F_geometry_msgs_Point;
struct  F_geometry_msgs_Pose;
struct  F_nav_msgs_MapMetaData;
struct  F_geometry_msgs_PoseWithCovariance;
struct  F_std_msgs_Header;
struct  F_sensor_msgs_FluidPressure;
struct  F_geometry_msgs_TransformStamped;
struct  F_sensor_msgs_Illuminance;
struct  F_geometry_msgs_PointStamped;
struct  F_nav_msgs_OccupancyGrid;
struct  F_geometry_msgs_PolygonStamped;
struct  F_geometry_msgs_AccelStamped;
struct  F_sensor_msgs_LaserScan;
struct  F_geometry_msgs_TwistStamped;
struct  F_actionlib_msgs_GoalStatusArray;
struct  F_nav_msgs_Odometry;
struct  F_sensor_msgs_Image;
struct  F_sensor_msgs_PointCloud;
struct  F_sensor_msgs_Range;
struct  F_geometry_msgs_AccelWithCovarianceStamped;
struct  F_sensor_msgs_MagneticField;
struct  F_geometry_msgs_TwistWithCovarianceStamped;
struct  F_nav_msgs_Path;
struct  F_sensor_msgs_Imu;
struct  F_sensor_msgs_MultiDOFJointState;
struct  F_geometry_msgs_PoseArray;
struct  F_sensor_msgs_PointCloud2;
struct  F_stereo_msgs_DisparityImage;
struct  F_geometry_msgs_PoseStamped;
struct  F_sensor_msgs_CameraInfo;
struct  F_sensor_msgs_JointState;
struct  F_geometry_msgs_Vector3Stamped;
struct  F_sensor_msgs_MultiEchoLaserScan;
struct  F_sensor_msgs_RelativeHumidity;
struct  F_trajectory_msgs_JointTrajectory;
struct  F_geometry_msgs_PoseWithCovarianceStamped;
struct  F_sensor_msgs_Joy;
struct  F_geometry_msgs_InertiaStamped;
struct  F_sensor_msgs_Temperature;
struct  F_trajectory_msgs_MultiDOFJointTrajectory;
struct  F_geometry_msgs_WrenchStamped;
struct  F_sensor_msgs_CompressedImage;
struct  F_sensor_msgs_JoyFeedback;
struct  F_geometry_msgs_QuaternionStamped;
struct  F_nav_msgs_GridCells;
struct  F_sensor_msgs_TimeReference;
struct  F_sensor_msgs_NavSatFix;



USTRUCT(BlueprintType)
struct F_std_msgs_Int16
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 data;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/Int16";
};


UCLASS()
class U_std_msgs_Int16Advertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_Int16Advertiser * Create_Int16_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_Int16 Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_Int16Delegate, F_std_msgs_Int16, Data);

UCLASS()
class U_std_msgs_Int16Subscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_Int16Subscriber * Create_Int16_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_Int16Delegate OnInt16Data;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_Int16 Data);
};

USTRUCT(BlueprintType)
struct F_geometry_msgs_Point32
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float x;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float y;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float z;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "geometry_msgs/Point32";
};


UCLASS()
class U_geometry_msgs_Point32Advertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_Point32Advertiser * Create_Point32_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_geometry_msgs_Point32 Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_geometry_msgs_Point32Delegate, F_geometry_msgs_Point32, Data);

UCLASS()
class U_geometry_msgs_Point32Subscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_Point32Subscriber * Create_Point32_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_geometry_msgs_Point32Delegate OnPoint32Data;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_geometry_msgs_Point32 Data);
};

USTRUCT(BlueprintType)
struct F_sensor_msgs_JoyFeedbackArray
{
	GENERATED_USTRUCT_BODY()

    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "sensor_msgs/JoyFeedbackArray";
};


UCLASS()
class U_sensor_msgs_JoyFeedbackArrayAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_JoyFeedbackArrayAdvertiser * Create_JoyFeedbackArray_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_sensor_msgs_JoyFeedbackArray Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_sensor_msgs_JoyFeedbackArrayDelegate, F_sensor_msgs_JoyFeedbackArray, Data);

UCLASS()
class U_sensor_msgs_JoyFeedbackArraySubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_JoyFeedbackArraySubscriber * Create_JoyFeedbackArray_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_sensor_msgs_JoyFeedbackArrayDelegate OnJoyFeedbackArrayData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_sensor_msgs_JoyFeedbackArray Data);
};

USTRUCT(BlueprintType)
struct F_sensor_msgs_PointField
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		FString name;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 offset;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		uint8 datatype;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 count;
		
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Robot OS")
		uint8 CONSTANT_INT8 = 1;
		
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Robot OS")
		uint8 CONSTANT_UINT8 = 2;
		
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Robot OS")
		uint8 CONSTANT_INT16 = 3;
		
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Robot OS")
		uint8 CONSTANT_UINT16 = 4;
		
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Robot OS")
		uint8 CONSTANT_INT32 = 5;
		
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Robot OS")
		uint8 CONSTANT_UINT32 = 6;
		
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Robot OS")
		uint8 CONSTANT_FLOAT32 = 7;
		
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Robot OS")
		uint8 CONSTANT_FLOAT64 = 8;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "sensor_msgs/PointField";
};


UCLASS()
class U_sensor_msgs_PointFieldAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_PointFieldAdvertiser * Create_PointField_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_sensor_msgs_PointField Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_sensor_msgs_PointFieldDelegate, F_sensor_msgs_PointField, Data);

UCLASS()
class U_sensor_msgs_PointFieldSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_PointFieldSubscriber * Create_PointField_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_sensor_msgs_PointFieldDelegate OnPointFieldData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_sensor_msgs_PointField Data);
};

USTRUCT(BlueprintType)
struct F_sensor_msgs_LaserEcho
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		TArray<float> echoes;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "sensor_msgs/LaserEcho";
};


UCLASS()
class U_sensor_msgs_LaserEchoAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_LaserEchoAdvertiser * Create_LaserEcho_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_sensor_msgs_LaserEcho Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_sensor_msgs_LaserEchoDelegate, F_sensor_msgs_LaserEcho, Data);

UCLASS()
class U_sensor_msgs_LaserEchoSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_LaserEchoSubscriber * Create_LaserEcho_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_sensor_msgs_LaserEchoDelegate OnLaserEchoData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_sensor_msgs_LaserEcho Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_Byte
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		uint8 data;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/Byte";
};


UCLASS()
class U_std_msgs_ByteAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_ByteAdvertiser * Create_Byte_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_Byte Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_ByteDelegate, F_std_msgs_Byte, Data);

UCLASS()
class U_std_msgs_ByteSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_ByteSubscriber * Create_Byte_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_ByteDelegate OnByteData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_Byte Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_Int32
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 data;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/Int32";
};


UCLASS()
class U_std_msgs_Int32Advertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_Int32Advertiser * Create_Int32_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_Int32 Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_Int32Delegate, F_std_msgs_Int32, Data);

UCLASS()
class U_std_msgs_Int32Subscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_Int32Subscriber * Create_Int32_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_Int32Delegate OnInt32Data;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_Int32 Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_UInt32
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 data;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/UInt32";
};


UCLASS()
class U_std_msgs_UInt32Advertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_UInt32Advertiser * Create_UInt32_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_UInt32 Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_UInt32Delegate, F_std_msgs_UInt32, Data);

UCLASS()
class U_std_msgs_UInt32Subscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_UInt32Subscriber * Create_UInt32_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_UInt32Delegate OnUInt32Data;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_UInt32 Data);
};

USTRUCT(BlueprintType)
struct F_geometry_msgs_Polygon
{
	GENERATED_USTRUCT_BODY()

    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "geometry_msgs/Polygon";
};


UCLASS()
class U_geometry_msgs_PolygonAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_PolygonAdvertiser * Create_Polygon_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_geometry_msgs_Polygon Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_geometry_msgs_PolygonDelegate, F_geometry_msgs_Polygon, Data);

UCLASS()
class U_geometry_msgs_PolygonSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_PolygonSubscriber * Create_Polygon_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_geometry_msgs_PolygonDelegate OnPolygonData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_geometry_msgs_Polygon Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_Char
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		uint8 data;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/Char";
};


UCLASS()
class U_std_msgs_CharAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_CharAdvertiser * Create_Char_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_Char Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_CharDelegate, F_std_msgs_Char, Data);

UCLASS()
class U_std_msgs_CharSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_CharSubscriber * Create_Char_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_CharDelegate OnCharData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_Char Data);
};

USTRUCT(BlueprintType)
struct F_sensor_msgs_NavSatStatus
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 status;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 service;
		
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Robot OS")
		int32 CONSTANT_SERVICE_GPS = 1;
		
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Robot OS")
		int32 CONSTANT_SERVICE_GLONASS = 2;
		
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Robot OS")
		int32 CONSTANT_SERVICE_GALILEO = 8;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "sensor_msgs/NavSatStatus";
};


UCLASS()
class U_sensor_msgs_NavSatStatusAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_NavSatStatusAdvertiser * Create_NavSatStatus_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_sensor_msgs_NavSatStatus Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_sensor_msgs_NavSatStatusDelegate, F_sensor_msgs_NavSatStatus, Data);

UCLASS()
class U_sensor_msgs_NavSatStatusSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_NavSatStatusSubscriber * Create_NavSatStatus_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_sensor_msgs_NavSatStatusDelegate OnNavSatStatusData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_sensor_msgs_NavSatStatus Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_Int64
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 data;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/Int64";
};


UCLASS()
class U_std_msgs_Int64Advertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_Int64Advertiser * Create_Int64_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_Int64 Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_Int64Delegate, F_std_msgs_Int64, Data);

UCLASS()
class U_std_msgs_Int64Subscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_Int64Subscriber * Create_Int64_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_Int64Delegate OnInt64Data;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_Int64 Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_ColorRGBA
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float r;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float g;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float b;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float a;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/ColorRGBA";
};


UCLASS()
class U_std_msgs_ColorRGBAAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_ColorRGBAAdvertiser * Create_ColorRGBA_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_ColorRGBA Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_ColorRGBADelegate, F_std_msgs_ColorRGBA, Data);

UCLASS()
class U_std_msgs_ColorRGBASubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_ColorRGBASubscriber * Create_ColorRGBA_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_ColorRGBADelegate OnColorRGBAData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_ColorRGBA Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_UInt64
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 data;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/UInt64";
};


UCLASS()
class U_std_msgs_UInt64Advertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_UInt64Advertiser * Create_UInt64_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_UInt64 Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_UInt64Delegate, F_std_msgs_UInt64, Data);

UCLASS()
class U_std_msgs_UInt64Subscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_UInt64Subscriber * Create_UInt64_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_UInt64Delegate OnUInt64Data;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_UInt64 Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_Duration
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 data;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/Duration";
};


UCLASS()
class U_std_msgs_DurationAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_DurationAdvertiser * Create_Duration_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_Duration Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_DurationDelegate, F_std_msgs_Duration, Data);

UCLASS()
class U_std_msgs_DurationSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_DurationSubscriber * Create_Duration_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_DurationDelegate OnDurationData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_Duration Data);
};

USTRUCT(BlueprintType)
struct F_actionlib_msgs_GoalID
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 stamp;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		FString id;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "actionlib_msgs/GoalID";
};


UCLASS()
class U_actionlib_msgs_GoalIDAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_actionlib_msgs_GoalIDAdvertiser * Create_GoalID_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_actionlib_msgs_GoalID Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_actionlib_msgs_GoalIDDelegate, F_actionlib_msgs_GoalID, Data);

UCLASS()
class U_actionlib_msgs_GoalIDSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_actionlib_msgs_GoalIDSubscriber * Create_GoalID_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_actionlib_msgs_GoalIDDelegate OnGoalIDData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_actionlib_msgs_GoalID Data);
};

USTRUCT(BlueprintType)
struct F_actionlib_msgs_GoalStatus
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_actionlib_msgs_GoalID goal_id;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		uint8 status;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		FString text;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "actionlib_msgs/GoalStatus";
};


UCLASS()
class U_actionlib_msgs_GoalStatusAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_actionlib_msgs_GoalStatusAdvertiser * Create_GoalStatus_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_actionlib_msgs_GoalStatus Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_actionlib_msgs_GoalStatusDelegate, F_actionlib_msgs_GoalStatus, Data);

UCLASS()
class U_actionlib_msgs_GoalStatusSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_actionlib_msgs_GoalStatusSubscriber * Create_GoalStatus_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_actionlib_msgs_GoalStatusDelegate OnGoalStatusData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_actionlib_msgs_GoalStatus Data);
};

USTRUCT(BlueprintType)
struct F_geometry_msgs_Pose2D
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float x;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float y;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float theta;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "geometry_msgs/Pose2D";
};


UCLASS()
class U_geometry_msgs_Pose2DAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_Pose2DAdvertiser * Create_Pose2D_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_geometry_msgs_Pose2D Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_geometry_msgs_Pose2DDelegate, F_geometry_msgs_Pose2D, Data);

UCLASS()
class U_geometry_msgs_Pose2DSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_Pose2DSubscriber * Create_Pose2D_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_geometry_msgs_Pose2DDelegate OnPose2DData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_geometry_msgs_Pose2D Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_Int8
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 data;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/Int8";
};


UCLASS()
class U_std_msgs_Int8Advertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_Int8Advertiser * Create_Int8_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_Int8 Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_Int8Delegate, F_std_msgs_Int8, Data);

UCLASS()
class U_std_msgs_Int8Subscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_Int8Subscriber * Create_Int8_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_Int8Delegate OnInt8Data;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_Int8 Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_Empty
{
	GENERATED_USTRUCT_BODY()

    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/Empty";
};


UCLASS()
class U_std_msgs_EmptyAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_EmptyAdvertiser * Create_Empty_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_Empty Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_EmptyDelegate, F_std_msgs_Empty, Data);

UCLASS()
class U_std_msgs_EmptySubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_EmptySubscriber * Create_Empty_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_EmptyDelegate OnEmptyData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_Empty Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_UInt8
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		uint8 data;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/UInt8";
};


UCLASS()
class U_std_msgs_UInt8Advertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_UInt8Advertiser * Create_UInt8_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_UInt8 Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_UInt8Delegate, F_std_msgs_UInt8, Data);

UCLASS()
class U_std_msgs_UInt8Subscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_UInt8Subscriber * Create_UInt8_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_UInt8Delegate OnUInt8Data;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_UInt8 Data);
};

USTRUCT(BlueprintType)
struct F_geometry_msgs_Vector3
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float x;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float y;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float z;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "geometry_msgs/Vector3";
};


UCLASS()
class U_geometry_msgs_Vector3Advertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_Vector3Advertiser * Create_Vector3_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_geometry_msgs_Vector3 Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_geometry_msgs_Vector3Delegate, F_geometry_msgs_Vector3, Data);

UCLASS()
class U_geometry_msgs_Vector3Subscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_Vector3Subscriber * Create_Vector3_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_geometry_msgs_Vector3Delegate OnVector3Data;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_geometry_msgs_Vector3 Data);
};

USTRUCT(BlueprintType)
struct F_geometry_msgs_Accel
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_Vector3 linear;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_Vector3 angular;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "geometry_msgs/Accel";
};


UCLASS()
class U_geometry_msgs_AccelAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_AccelAdvertiser * Create_Accel_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_geometry_msgs_Accel Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_geometry_msgs_AccelDelegate, F_geometry_msgs_Accel, Data);

UCLASS()
class U_geometry_msgs_AccelSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_AccelSubscriber * Create_Accel_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_geometry_msgs_AccelDelegate OnAccelData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_geometry_msgs_Accel Data);
};

USTRUCT(BlueprintType)
struct F_geometry_msgs_Twist
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_Vector3 linear;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_Vector3 angular;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "geometry_msgs/Twist";
};


UCLASS()
class U_geometry_msgs_TwistAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_TwistAdvertiser * Create_Twist_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_geometry_msgs_Twist Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_geometry_msgs_TwistDelegate, F_geometry_msgs_Twist, Data);

UCLASS()
class U_geometry_msgs_TwistSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_TwistSubscriber * Create_Twist_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_geometry_msgs_TwistDelegate OnTwistData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_geometry_msgs_Twist Data);
};

USTRUCT(BlueprintType)
struct F_geometry_msgs_AccelWithCovariance
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_Accel accel;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "geometry_msgs/AccelWithCovariance";
};


UCLASS()
class U_geometry_msgs_AccelWithCovarianceAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_AccelWithCovarianceAdvertiser * Create_AccelWithCovariance_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_geometry_msgs_AccelWithCovariance Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_geometry_msgs_AccelWithCovarianceDelegate, F_geometry_msgs_AccelWithCovariance, Data);

UCLASS()
class U_geometry_msgs_AccelWithCovarianceSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_AccelWithCovarianceSubscriber * Create_AccelWithCovariance_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_geometry_msgs_AccelWithCovarianceDelegate OnAccelWithCovarianceData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_geometry_msgs_AccelWithCovariance Data);
};

USTRUCT(BlueprintType)
struct F_geometry_msgs_TwistWithCovariance
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_Twist twist;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "geometry_msgs/TwistWithCovariance";
};


UCLASS()
class U_geometry_msgs_TwistWithCovarianceAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_TwistWithCovarianceAdvertiser * Create_TwistWithCovariance_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_geometry_msgs_TwistWithCovariance Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_geometry_msgs_TwistWithCovarianceDelegate, F_geometry_msgs_TwistWithCovariance, Data);

UCLASS()
class U_geometry_msgs_TwistWithCovarianceSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_TwistWithCovarianceSubscriber * Create_TwistWithCovariance_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_geometry_msgs_TwistWithCovarianceDelegate OnTwistWithCovarianceData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_geometry_msgs_TwistWithCovariance Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_Float32
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float data;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/Float32";
};


UCLASS()
class U_std_msgs_Float32Advertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_Float32Advertiser * Create_Float32_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_Float32 Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_Float32Delegate, F_std_msgs_Float32, Data);

UCLASS()
class U_std_msgs_Float32Subscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_Float32Subscriber * Create_Float32_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_Float32Delegate OnFloat32Data;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_Float32 Data);
};

USTRUCT(BlueprintType)
struct F_sensor_msgs_RegionOfInterest
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 x_offset;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 y_offset;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 height;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 width;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		bool do_rectify;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "sensor_msgs/RegionOfInterest";
};


UCLASS()
class U_sensor_msgs_RegionOfInterestAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_RegionOfInterestAdvertiser * Create_RegionOfInterest_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_sensor_msgs_RegionOfInterest Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_sensor_msgs_RegionOfInterestDelegate, F_sensor_msgs_RegionOfInterest, Data);

UCLASS()
class U_sensor_msgs_RegionOfInterestSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_RegionOfInterestSubscriber * Create_RegionOfInterest_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_sensor_msgs_RegionOfInterestDelegate OnRegionOfInterestData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_sensor_msgs_RegionOfInterest Data);
};

USTRUCT(BlueprintType)
struct F_geometry_msgs_Inertia
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float m;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_Vector3 com;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float ixx;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float ixy;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float ixz;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float iyy;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float iyz;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float izz;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "geometry_msgs/Inertia";
};


UCLASS()
class U_geometry_msgs_InertiaAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_InertiaAdvertiser * Create_Inertia_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_geometry_msgs_Inertia Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_geometry_msgs_InertiaDelegate, F_geometry_msgs_Inertia, Data);

UCLASS()
class U_geometry_msgs_InertiaSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_InertiaSubscriber * Create_Inertia_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_geometry_msgs_InertiaDelegate OnInertiaData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_geometry_msgs_Inertia Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_MultiArrayDimension
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		FString label;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 size;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 stride;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/MultiArrayDimension";
};


UCLASS()
class U_std_msgs_MultiArrayDimensionAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_MultiArrayDimensionAdvertiser * Create_MultiArrayDimension_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_MultiArrayDimension Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_MultiArrayDimensionDelegate, F_std_msgs_MultiArrayDimension, Data);

UCLASS()
class U_std_msgs_MultiArrayDimensionSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_MultiArrayDimensionSubscriber * Create_MultiArrayDimension_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_MultiArrayDimensionDelegate OnMultiArrayDimensionData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_MultiArrayDimension Data);
};

USTRUCT(BlueprintType)
struct F_trajectory_msgs_JointTrajectoryPoint
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 time_from_start;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "trajectory_msgs/JointTrajectoryPoint";
};


UCLASS()
class U_trajectory_msgs_JointTrajectoryPointAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_trajectory_msgs_JointTrajectoryPointAdvertiser * Create_JointTrajectoryPoint_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_trajectory_msgs_JointTrajectoryPoint Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_trajectory_msgs_JointTrajectoryPointDelegate, F_trajectory_msgs_JointTrajectoryPoint, Data);

UCLASS()
class U_trajectory_msgs_JointTrajectoryPointSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_trajectory_msgs_JointTrajectoryPointSubscriber * Create_JointTrajectoryPoint_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_trajectory_msgs_JointTrajectoryPointDelegate OnJointTrajectoryPointData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_trajectory_msgs_JointTrajectoryPoint Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_UInt16
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 data;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/UInt16";
};


UCLASS()
class U_std_msgs_UInt16Advertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_UInt16Advertiser * Create_UInt16_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_UInt16 Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_UInt16Delegate, F_std_msgs_UInt16, Data);

UCLASS()
class U_std_msgs_UInt16Subscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_UInt16Subscriber * Create_UInt16_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_UInt16Delegate OnUInt16Data;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_UInt16 Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_Float64
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float data;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/Float64";
};


UCLASS()
class U_std_msgs_Float64Advertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_Float64Advertiser * Create_Float64_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_Float64 Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_Float64Delegate, F_std_msgs_Float64, Data);

UCLASS()
class U_std_msgs_Float64Subscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_Float64Subscriber * Create_Float64_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_Float64Delegate OnFloat64Data;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_Float64 Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_MultiArrayLayout
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 data_offset;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		TArray<F_std_msgs_MultiArrayDimension> dim;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/MultiArrayLayout";
};


UCLASS()
class U_std_msgs_MultiArrayLayoutAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_MultiArrayLayoutAdvertiser * Create_MultiArrayLayout_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_MultiArrayLayout Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_MultiArrayLayoutDelegate, F_std_msgs_MultiArrayLayout, Data);

UCLASS()
class U_std_msgs_MultiArrayLayoutSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_MultiArrayLayoutSubscriber * Create_MultiArrayLayout_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_MultiArrayLayoutDelegate OnMultiArrayLayoutData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_MultiArrayLayout Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_UInt16MultiArray
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_MultiArrayLayout layout;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		TArray<int32> data;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/UInt16MultiArray";
};


UCLASS()
class U_std_msgs_UInt16MultiArrayAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_UInt16MultiArrayAdvertiser * Create_UInt16MultiArray_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_UInt16MultiArray Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_UInt16MultiArrayDelegate, F_std_msgs_UInt16MultiArray, Data);

UCLASS()
class U_std_msgs_UInt16MultiArraySubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_UInt16MultiArraySubscriber * Create_UInt16MultiArray_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_UInt16MultiArrayDelegate OnUInt16MultiArrayData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_UInt16MultiArray Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_Int16MultiArray
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_MultiArrayLayout layout;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		TArray<int32> data;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/Int16MultiArray";
};


UCLASS()
class U_std_msgs_Int16MultiArrayAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_Int16MultiArrayAdvertiser * Create_Int16MultiArray_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_Int16MultiArray Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_Int16MultiArrayDelegate, F_std_msgs_Int16MultiArray, Data);

UCLASS()
class U_std_msgs_Int16MultiArraySubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_Int16MultiArraySubscriber * Create_Int16MultiArray_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_Int16MultiArrayDelegate OnInt16MultiArrayData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_Int16MultiArray Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_ByteMultiArray
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_MultiArrayLayout layout;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		TArray<uint8> data;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/ByteMultiArray";
};


UCLASS()
class U_std_msgs_ByteMultiArrayAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_ByteMultiArrayAdvertiser * Create_ByteMultiArray_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_ByteMultiArray Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_ByteMultiArrayDelegate, F_std_msgs_ByteMultiArray, Data);

UCLASS()
class U_std_msgs_ByteMultiArraySubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_ByteMultiArraySubscriber * Create_ByteMultiArray_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_ByteMultiArrayDelegate OnByteMultiArrayData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_ByteMultiArray Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_Int32MultiArray
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_MultiArrayLayout layout;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		TArray<int32> data;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/Int32MultiArray";
};


UCLASS()
class U_std_msgs_Int32MultiArrayAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_Int32MultiArrayAdvertiser * Create_Int32MultiArray_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_Int32MultiArray Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_Int32MultiArrayDelegate, F_std_msgs_Int32MultiArray, Data);

UCLASS()
class U_std_msgs_Int32MultiArraySubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_Int32MultiArraySubscriber * Create_Int32MultiArray_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_Int32MultiArrayDelegate OnInt32MultiArrayData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_Int32MultiArray Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_UInt32MultiArray
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_MultiArrayLayout layout;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		TArray<int32> data;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/UInt32MultiArray";
};


UCLASS()
class U_std_msgs_UInt32MultiArrayAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_UInt32MultiArrayAdvertiser * Create_UInt32MultiArray_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_UInt32MultiArray Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_UInt32MultiArrayDelegate, F_std_msgs_UInt32MultiArray, Data);

UCLASS()
class U_std_msgs_UInt32MultiArraySubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_UInt32MultiArraySubscriber * Create_UInt32MultiArray_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_UInt32MultiArrayDelegate OnUInt32MultiArrayData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_UInt32MultiArray Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_Int64MultiArray
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_MultiArrayLayout layout;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		TArray<int32> data;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/Int64MultiArray";
};


UCLASS()
class U_std_msgs_Int64MultiArrayAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_Int64MultiArrayAdvertiser * Create_Int64MultiArray_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_Int64MultiArray Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_Int64MultiArrayDelegate, F_std_msgs_Int64MultiArray, Data);

UCLASS()
class U_std_msgs_Int64MultiArraySubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_Int64MultiArraySubscriber * Create_Int64MultiArray_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_Int64MultiArrayDelegate OnInt64MultiArrayData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_Int64MultiArray Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_UInt64MultiArray
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_MultiArrayLayout layout;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		TArray<int32> data;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/UInt64MultiArray";
};


UCLASS()
class U_std_msgs_UInt64MultiArrayAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_UInt64MultiArrayAdvertiser * Create_UInt64MultiArray_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_UInt64MultiArray Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_UInt64MultiArrayDelegate, F_std_msgs_UInt64MultiArray, Data);

UCLASS()
class U_std_msgs_UInt64MultiArraySubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_UInt64MultiArraySubscriber * Create_UInt64MultiArray_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_UInt64MultiArrayDelegate OnUInt64MultiArrayData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_UInt64MultiArray Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_Int8MultiArray
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_MultiArrayLayout layout;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		TArray<int32> data;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/Int8MultiArray";
};


UCLASS()
class U_std_msgs_Int8MultiArrayAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_Int8MultiArrayAdvertiser * Create_Int8MultiArray_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_Int8MultiArray Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_Int8MultiArrayDelegate, F_std_msgs_Int8MultiArray, Data);

UCLASS()
class U_std_msgs_Int8MultiArraySubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_Int8MultiArraySubscriber * Create_Int8MultiArray_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_Int8MultiArrayDelegate OnInt8MultiArrayData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_Int8MultiArray Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_UInt8MultiArray
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_MultiArrayLayout layout;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		TArray<uint8> data;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/UInt8MultiArray";
};


UCLASS()
class U_std_msgs_UInt8MultiArrayAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_UInt8MultiArrayAdvertiser * Create_UInt8MultiArray_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_UInt8MultiArray Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_UInt8MultiArrayDelegate, F_std_msgs_UInt8MultiArray, Data);

UCLASS()
class U_std_msgs_UInt8MultiArraySubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_UInt8MultiArraySubscriber * Create_UInt8MultiArray_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_UInt8MultiArrayDelegate OnUInt8MultiArrayData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_UInt8MultiArray Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_Float32MultiArray
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_MultiArrayLayout layout;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		TArray<float> data;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/Float32MultiArray";
};


UCLASS()
class U_std_msgs_Float32MultiArrayAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_Float32MultiArrayAdvertiser * Create_Float32MultiArray_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_Float32MultiArray Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_Float32MultiArrayDelegate, F_std_msgs_Float32MultiArray, Data);

UCLASS()
class U_std_msgs_Float32MultiArraySubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_Float32MultiArraySubscriber * Create_Float32MultiArray_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_Float32MultiArrayDelegate OnFloat32MultiArrayData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_Float32MultiArray Data);
};

USTRUCT(BlueprintType)
struct F_geometry_msgs_Wrench
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_Vector3 force;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_Vector3 torque;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "geometry_msgs/Wrench";
};


UCLASS()
class U_geometry_msgs_WrenchAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_WrenchAdvertiser * Create_Wrench_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_geometry_msgs_Wrench Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_geometry_msgs_WrenchDelegate, F_geometry_msgs_Wrench, Data);

UCLASS()
class U_geometry_msgs_WrenchSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_WrenchSubscriber * Create_Wrench_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_geometry_msgs_WrenchDelegate OnWrenchData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_geometry_msgs_Wrench Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_Float64MultiArray
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_MultiArrayLayout layout;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		TArray<float> data;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/Float64MultiArray";
};


UCLASS()
class U_std_msgs_Float64MultiArrayAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_Float64MultiArrayAdvertiser * Create_Float64MultiArray_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_Float64MultiArray Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_Float64MultiArrayDelegate, F_std_msgs_Float64MultiArray, Data);

UCLASS()
class U_std_msgs_Float64MultiArraySubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_Float64MultiArraySubscriber * Create_Float64MultiArray_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_Float64MultiArrayDelegate OnFloat64MultiArrayData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_Float64MultiArray Data);
};

USTRUCT(BlueprintType)
struct F_sensor_msgs_ChannelFloat32
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		FString name;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "sensor_msgs/ChannelFloat32";
};


UCLASS()
class U_sensor_msgs_ChannelFloat32Advertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_ChannelFloat32Advertiser * Create_ChannelFloat32_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_sensor_msgs_ChannelFloat32 Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_sensor_msgs_ChannelFloat32Delegate, F_sensor_msgs_ChannelFloat32, Data);

UCLASS()
class U_sensor_msgs_ChannelFloat32Subscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_ChannelFloat32Subscriber * Create_ChannelFloat32_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_sensor_msgs_ChannelFloat32Delegate OnChannelFloat32Data;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_sensor_msgs_ChannelFloat32 Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_Bool
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		bool data;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/Bool";
};


UCLASS()
class U_std_msgs_BoolAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_BoolAdvertiser * Create_Bool_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_Bool Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_BoolDelegate, F_std_msgs_Bool, Data);

UCLASS()
class U_std_msgs_BoolSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_BoolSubscriber * Create_Bool_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_BoolDelegate OnBoolData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_Bool Data);
};

USTRUCT(BlueprintType)
struct F_geometry_msgs_Quaternion
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float x;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float y;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float z;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float w;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "geometry_msgs/Quaternion";
};


UCLASS()
class U_geometry_msgs_QuaternionAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_QuaternionAdvertiser * Create_Quaternion_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_geometry_msgs_Quaternion Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_geometry_msgs_QuaternionDelegate, F_geometry_msgs_Quaternion, Data);

UCLASS()
class U_geometry_msgs_QuaternionSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_QuaternionSubscriber * Create_Quaternion_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_geometry_msgs_QuaternionDelegate OnQuaternionData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_geometry_msgs_Quaternion Data);
};

USTRUCT(BlueprintType)
struct F_geometry_msgs_Transform
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_Vector3 translation;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_Quaternion rotation;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "geometry_msgs/Transform";
};


UCLASS()
class U_geometry_msgs_TransformAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_TransformAdvertiser * Create_Transform_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_geometry_msgs_Transform Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_geometry_msgs_TransformDelegate, F_geometry_msgs_Transform, Data);

UCLASS()
class U_geometry_msgs_TransformSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_TransformSubscriber * Create_Transform_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_geometry_msgs_TransformDelegate OnTransformData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_geometry_msgs_Transform Data);
};

USTRUCT(BlueprintType)
struct F_trajectory_msgs_MultiDOFJointTrajectoryPoint
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 time_from_start;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		TArray<F_geometry_msgs_Transform> transforms;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		TArray<F_geometry_msgs_Twist> velocities;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "trajectory_msgs/MultiDOFJointTrajectoryPoint";
};


UCLASS()
class U_trajectory_msgs_MultiDOFJointTrajectoryPointAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_trajectory_msgs_MultiDOFJointTrajectoryPointAdvertiser * Create_MultiDOFJointTrajectoryPoint_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_trajectory_msgs_MultiDOFJointTrajectoryPoint Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_trajectory_msgs_MultiDOFJointTrajectoryPointDelegate, F_trajectory_msgs_MultiDOFJointTrajectoryPoint, Data);

UCLASS()
class U_trajectory_msgs_MultiDOFJointTrajectoryPointSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_trajectory_msgs_MultiDOFJointTrajectoryPointSubscriber * Create_MultiDOFJointTrajectoryPoint_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_trajectory_msgs_MultiDOFJointTrajectoryPointDelegate OnMultiDOFJointTrajectoryPointData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_trajectory_msgs_MultiDOFJointTrajectoryPoint Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_String
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		FString data;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/String";
};


UCLASS()
class U_std_msgs_StringAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_StringAdvertiser * Create_String_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_String Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_StringDelegate, F_std_msgs_String, Data);

UCLASS()
class U_std_msgs_StringSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_StringSubscriber * Create_String_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_StringDelegate OnStringData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_String Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_Time
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 data;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/Time";
};


UCLASS()
class U_std_msgs_TimeAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_TimeAdvertiser * Create_Time_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_Time Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_TimeDelegate, F_std_msgs_Time, Data);

UCLASS()
class U_std_msgs_TimeSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_TimeSubscriber * Create_Time_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_TimeDelegate OnTimeData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_Time Data);
};

USTRUCT(BlueprintType)
struct F_geometry_msgs_Point
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float x;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float y;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float z;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "geometry_msgs/Point";
};


UCLASS()
class U_geometry_msgs_PointAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_PointAdvertiser * Create_Point_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_geometry_msgs_Point Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_geometry_msgs_PointDelegate, F_geometry_msgs_Point, Data);

UCLASS()
class U_geometry_msgs_PointSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_PointSubscriber * Create_Point_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_geometry_msgs_PointDelegate OnPointData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_geometry_msgs_Point Data);
};

USTRUCT(BlueprintType)
struct F_geometry_msgs_Pose
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_Point position;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_Quaternion orientation;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "geometry_msgs/Pose";
};


UCLASS()
class U_geometry_msgs_PoseAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_PoseAdvertiser * Create_Pose_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_geometry_msgs_Pose Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_geometry_msgs_PoseDelegate, F_geometry_msgs_Pose, Data);

UCLASS()
class U_geometry_msgs_PoseSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_PoseSubscriber * Create_Pose_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_geometry_msgs_PoseDelegate OnPoseData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_geometry_msgs_Pose Data);
};

USTRUCT(BlueprintType)
struct F_nav_msgs_MapMetaData
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 map_load_time;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float resolution;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 width;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 height;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_Pose origin;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "nav_msgs/MapMetaData";
};


UCLASS()
class U_nav_msgs_MapMetaDataAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_nav_msgs_MapMetaDataAdvertiser * Create_MapMetaData_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_nav_msgs_MapMetaData Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_nav_msgs_MapMetaDataDelegate, F_nav_msgs_MapMetaData, Data);

UCLASS()
class U_nav_msgs_MapMetaDataSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_nav_msgs_MapMetaDataSubscriber * Create_MapMetaData_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_nav_msgs_MapMetaDataDelegate OnMapMetaDataData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_nav_msgs_MapMetaData Data);
};

USTRUCT(BlueprintType)
struct F_geometry_msgs_PoseWithCovariance
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_Pose pose;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "geometry_msgs/PoseWithCovariance";
};


UCLASS()
class U_geometry_msgs_PoseWithCovarianceAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_PoseWithCovarianceAdvertiser * Create_PoseWithCovariance_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_geometry_msgs_PoseWithCovariance Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_geometry_msgs_PoseWithCovarianceDelegate, F_geometry_msgs_PoseWithCovariance, Data);

UCLASS()
class U_geometry_msgs_PoseWithCovarianceSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_PoseWithCovarianceSubscriber * Create_PoseWithCovariance_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_geometry_msgs_PoseWithCovarianceDelegate OnPoseWithCovarianceData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_geometry_msgs_PoseWithCovariance Data);
};

USTRUCT(BlueprintType)
struct F_std_msgs_Header
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 seq;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 stamp;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		FString frame_id;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "std_msgs/Header";
};


UCLASS()
class U_std_msgs_HeaderAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_HeaderAdvertiser * Create_Header_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_std_msgs_Header Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_std_msgs_HeaderDelegate, F_std_msgs_Header, Data);

UCLASS()
class U_std_msgs_HeaderSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_std_msgs_HeaderSubscriber * Create_Header_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_std_msgs_HeaderDelegate OnHeaderData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_std_msgs_Header Data);
};

USTRUCT(BlueprintType)
struct F_sensor_msgs_FluidPressure
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float fluid_pressure;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float variance;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "sensor_msgs/FluidPressure";
};


UCLASS()
class U_sensor_msgs_FluidPressureAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_FluidPressureAdvertiser * Create_FluidPressure_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_sensor_msgs_FluidPressure Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_sensor_msgs_FluidPressureDelegate, F_sensor_msgs_FluidPressure, Data);

UCLASS()
class U_sensor_msgs_FluidPressureSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_FluidPressureSubscriber * Create_FluidPressure_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_sensor_msgs_FluidPressureDelegate OnFluidPressureData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_sensor_msgs_FluidPressure Data);
};

USTRUCT(BlueprintType)
struct F_geometry_msgs_TransformStamped
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		FString child_frame_id;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_Transform transform;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "geometry_msgs/TransformStamped";
};


UCLASS()
class U_geometry_msgs_TransformStampedAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_TransformStampedAdvertiser * Create_TransformStamped_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_geometry_msgs_TransformStamped Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_geometry_msgs_TransformStampedDelegate, F_geometry_msgs_TransformStamped, Data);

UCLASS()
class U_geometry_msgs_TransformStampedSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_TransformStampedSubscriber * Create_TransformStamped_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_geometry_msgs_TransformStampedDelegate OnTransformStampedData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_geometry_msgs_TransformStamped Data);
};

USTRUCT(BlueprintType)
struct F_sensor_msgs_Illuminance
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float illuminance;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float variance;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "sensor_msgs/Illuminance";
};


UCLASS()
class U_sensor_msgs_IlluminanceAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_IlluminanceAdvertiser * Create_Illuminance_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_sensor_msgs_Illuminance Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_sensor_msgs_IlluminanceDelegate, F_sensor_msgs_Illuminance, Data);

UCLASS()
class U_sensor_msgs_IlluminanceSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_IlluminanceSubscriber * Create_Illuminance_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_sensor_msgs_IlluminanceDelegate OnIlluminanceData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_sensor_msgs_Illuminance Data);
};

USTRUCT(BlueprintType)
struct F_geometry_msgs_PointStamped
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_Point point;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "geometry_msgs/PointStamped";
};


UCLASS()
class U_geometry_msgs_PointStampedAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_PointStampedAdvertiser * Create_PointStamped_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_geometry_msgs_PointStamped Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_geometry_msgs_PointStampedDelegate, F_geometry_msgs_PointStamped, Data);

UCLASS()
class U_geometry_msgs_PointStampedSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_PointStampedSubscriber * Create_PointStamped_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_geometry_msgs_PointStampedDelegate OnPointStampedData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_geometry_msgs_PointStamped Data);
};

USTRUCT(BlueprintType)
struct F_nav_msgs_OccupancyGrid
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_nav_msgs_MapMetaData info;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "nav_msgs/OccupancyGrid";
};


UCLASS()
class U_nav_msgs_OccupancyGridAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_nav_msgs_OccupancyGridAdvertiser * Create_OccupancyGrid_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_nav_msgs_OccupancyGrid Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_nav_msgs_OccupancyGridDelegate, F_nav_msgs_OccupancyGrid, Data);

UCLASS()
class U_nav_msgs_OccupancyGridSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_nav_msgs_OccupancyGridSubscriber * Create_OccupancyGrid_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_nav_msgs_OccupancyGridDelegate OnOccupancyGridData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_nav_msgs_OccupancyGrid Data);
};

USTRUCT(BlueprintType)
struct F_geometry_msgs_PolygonStamped
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_Polygon polygon;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "geometry_msgs/PolygonStamped";
};


UCLASS()
class U_geometry_msgs_PolygonStampedAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_PolygonStampedAdvertiser * Create_PolygonStamped_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_geometry_msgs_PolygonStamped Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_geometry_msgs_PolygonStampedDelegate, F_geometry_msgs_PolygonStamped, Data);

UCLASS()
class U_geometry_msgs_PolygonStampedSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_PolygonStampedSubscriber * Create_PolygonStamped_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_geometry_msgs_PolygonStampedDelegate OnPolygonStampedData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_geometry_msgs_PolygonStamped Data);
};

USTRUCT(BlueprintType)
struct F_geometry_msgs_AccelStamped
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_Accel accel;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "geometry_msgs/AccelStamped";
};


UCLASS()
class U_geometry_msgs_AccelStampedAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_AccelStampedAdvertiser * Create_AccelStamped_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_geometry_msgs_AccelStamped Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_geometry_msgs_AccelStampedDelegate, F_geometry_msgs_AccelStamped, Data);

UCLASS()
class U_geometry_msgs_AccelStampedSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_AccelStampedSubscriber * Create_AccelStamped_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_geometry_msgs_AccelStampedDelegate OnAccelStampedData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_geometry_msgs_AccelStamped Data);
};

USTRUCT(BlueprintType)
struct F_sensor_msgs_LaserScan
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float angle_min;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float angle_max;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float angle_increment;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float time_increment;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float scan_time;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float range_min;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float range_max;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		TArray<float> ranges;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		TArray<float> intensities;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "sensor_msgs/LaserScan";
};


UCLASS()
class U_sensor_msgs_LaserScanAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_LaserScanAdvertiser * Create_LaserScan_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_sensor_msgs_LaserScan Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_sensor_msgs_LaserScanDelegate, F_sensor_msgs_LaserScan, Data);

UCLASS()
class U_sensor_msgs_LaserScanSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_LaserScanSubscriber * Create_LaserScan_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_sensor_msgs_LaserScanDelegate OnLaserScanData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_sensor_msgs_LaserScan Data);
};

USTRUCT(BlueprintType)
struct F_geometry_msgs_TwistStamped
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_Twist twist;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "geometry_msgs/TwistStamped";
};


UCLASS()
class U_geometry_msgs_TwistStampedAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_TwistStampedAdvertiser * Create_TwistStamped_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_geometry_msgs_TwistStamped Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_geometry_msgs_TwistStampedDelegate, F_geometry_msgs_TwistStamped, Data);

UCLASS()
class U_geometry_msgs_TwistStampedSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_TwistStampedSubscriber * Create_TwistStamped_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_geometry_msgs_TwistStampedDelegate OnTwistStampedData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_geometry_msgs_TwistStamped Data);
};

USTRUCT(BlueprintType)
struct F_actionlib_msgs_GoalStatusArray
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "actionlib_msgs/GoalStatusArray";
};


UCLASS()
class U_actionlib_msgs_GoalStatusArrayAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_actionlib_msgs_GoalStatusArrayAdvertiser * Create_GoalStatusArray_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_actionlib_msgs_GoalStatusArray Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_actionlib_msgs_GoalStatusArrayDelegate, F_actionlib_msgs_GoalStatusArray, Data);

UCLASS()
class U_actionlib_msgs_GoalStatusArraySubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_actionlib_msgs_GoalStatusArraySubscriber * Create_GoalStatusArray_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_actionlib_msgs_GoalStatusArrayDelegate OnGoalStatusArrayData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_actionlib_msgs_GoalStatusArray Data);
};

USTRUCT(BlueprintType)
struct F_nav_msgs_Odometry
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		FString child_frame_id;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_PoseWithCovariance pose;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_TwistWithCovariance twist;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "nav_msgs/Odometry";
};


UCLASS()
class U_nav_msgs_OdometryAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_nav_msgs_OdometryAdvertiser * Create_Odometry_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_nav_msgs_Odometry Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_nav_msgs_OdometryDelegate, F_nav_msgs_Odometry, Data);

UCLASS()
class U_nav_msgs_OdometrySubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_nav_msgs_OdometrySubscriber * Create_Odometry_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_nav_msgs_OdometryDelegate OnOdometryData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_nav_msgs_Odometry Data);
};

USTRUCT(BlueprintType)
struct F_sensor_msgs_Image
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 height;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 width;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		FString encoding;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		uint8 is_bigendian;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 step;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		TArray<uint8> data;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "sensor_msgs/Image";
};


UCLASS()
class U_sensor_msgs_ImageAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_ImageAdvertiser * Create_Image_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_sensor_msgs_Image Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_sensor_msgs_ImageDelegate, F_sensor_msgs_Image, Data);

UCLASS()
class U_sensor_msgs_ImageSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_ImageSubscriber * Create_Image_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_sensor_msgs_ImageDelegate OnImageData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_sensor_msgs_Image Data);
};

USTRUCT(BlueprintType)
struct F_sensor_msgs_PointCloud
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		TArray<F_geometry_msgs_Point32> points;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "sensor_msgs/PointCloud";
};


UCLASS()
class U_sensor_msgs_PointCloudAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_PointCloudAdvertiser * Create_PointCloud_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_sensor_msgs_PointCloud Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_sensor_msgs_PointCloudDelegate, F_sensor_msgs_PointCloud, Data);

UCLASS()
class U_sensor_msgs_PointCloudSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_PointCloudSubscriber * Create_PointCloud_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_sensor_msgs_PointCloudDelegate OnPointCloudData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_sensor_msgs_PointCloud Data);
};

USTRUCT(BlueprintType)
struct F_sensor_msgs_Range
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		uint8 radiation_type;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float field_of_view;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float min_range;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float max_range;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float range;
		
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Robot OS")
		uint8 CONSTANT_ULTRASOUND = 0;
		
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Robot OS")
		uint8 CONSTANT_INFRARED = 1;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "sensor_msgs/Range";
};


UCLASS()
class U_sensor_msgs_RangeAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_RangeAdvertiser * Create_Range_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_sensor_msgs_Range Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_sensor_msgs_RangeDelegate, F_sensor_msgs_Range, Data);

UCLASS()
class U_sensor_msgs_RangeSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_RangeSubscriber * Create_Range_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_sensor_msgs_RangeDelegate OnRangeData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_sensor_msgs_Range Data);
};

USTRUCT(BlueprintType)
struct F_geometry_msgs_AccelWithCovarianceStamped
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_AccelWithCovariance accel;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "geometry_msgs/AccelWithCovarianceStamped";
};


UCLASS()
class U_geometry_msgs_AccelWithCovarianceStampedAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_AccelWithCovarianceStampedAdvertiser * Create_AccelWithCovarianceStamped_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_geometry_msgs_AccelWithCovarianceStamped Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_geometry_msgs_AccelWithCovarianceStampedDelegate, F_geometry_msgs_AccelWithCovarianceStamped, Data);

UCLASS()
class U_geometry_msgs_AccelWithCovarianceStampedSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_AccelWithCovarianceStampedSubscriber * Create_AccelWithCovarianceStamped_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_geometry_msgs_AccelWithCovarianceStampedDelegate OnAccelWithCovarianceStampedData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_geometry_msgs_AccelWithCovarianceStamped Data);
};

USTRUCT(BlueprintType)
struct F_sensor_msgs_MagneticField
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_Vector3 magnetic_field;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "sensor_msgs/MagneticField";
};


UCLASS()
class U_sensor_msgs_MagneticFieldAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_MagneticFieldAdvertiser * Create_MagneticField_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_sensor_msgs_MagneticField Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_sensor_msgs_MagneticFieldDelegate, F_sensor_msgs_MagneticField, Data);

UCLASS()
class U_sensor_msgs_MagneticFieldSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_MagneticFieldSubscriber * Create_MagneticField_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_sensor_msgs_MagneticFieldDelegate OnMagneticFieldData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_sensor_msgs_MagneticField Data);
};

USTRUCT(BlueprintType)
struct F_geometry_msgs_TwistWithCovarianceStamped
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_TwistWithCovariance twist;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "geometry_msgs/TwistWithCovarianceStamped";
};


UCLASS()
class U_geometry_msgs_TwistWithCovarianceStampedAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_TwistWithCovarianceStampedAdvertiser * Create_TwistWithCovarianceStamped_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_geometry_msgs_TwistWithCovarianceStamped Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_geometry_msgs_TwistWithCovarianceStampedDelegate, F_geometry_msgs_TwistWithCovarianceStamped, Data);

UCLASS()
class U_geometry_msgs_TwistWithCovarianceStampedSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_TwistWithCovarianceStampedSubscriber * Create_TwistWithCovarianceStamped_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_geometry_msgs_TwistWithCovarianceStampedDelegate OnTwistWithCovarianceStampedData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_geometry_msgs_TwistWithCovarianceStamped Data);
};

USTRUCT(BlueprintType)
struct F_nav_msgs_Path
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "nav_msgs/Path";
};


UCLASS()
class U_nav_msgs_PathAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_nav_msgs_PathAdvertiser * Create_Path_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_nav_msgs_Path Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_nav_msgs_PathDelegate, F_nav_msgs_Path, Data);

UCLASS()
class U_nav_msgs_PathSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_nav_msgs_PathSubscriber * Create_Path_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_nav_msgs_PathDelegate OnPathData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_nav_msgs_Path Data);
};

USTRUCT(BlueprintType)
struct F_sensor_msgs_Imu
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_Quaternion orientation;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_Vector3 angular_velocity;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_Vector3 linear_acceleration;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "sensor_msgs/Imu";
};


UCLASS()
class U_sensor_msgs_ImuAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_ImuAdvertiser * Create_Imu_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_sensor_msgs_Imu Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_sensor_msgs_ImuDelegate, F_sensor_msgs_Imu, Data);

UCLASS()
class U_sensor_msgs_ImuSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_ImuSubscriber * Create_Imu_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_sensor_msgs_ImuDelegate OnImuData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_sensor_msgs_Imu Data);
};

USTRUCT(BlueprintType)
struct F_sensor_msgs_MultiDOFJointState
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "sensor_msgs/MultiDOFJointState";
};


UCLASS()
class U_sensor_msgs_MultiDOFJointStateAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_MultiDOFJointStateAdvertiser * Create_MultiDOFJointState_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_sensor_msgs_MultiDOFJointState Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_sensor_msgs_MultiDOFJointStateDelegate, F_sensor_msgs_MultiDOFJointState, Data);

UCLASS()
class U_sensor_msgs_MultiDOFJointStateSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_MultiDOFJointStateSubscriber * Create_MultiDOFJointState_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_sensor_msgs_MultiDOFJointStateDelegate OnMultiDOFJointStateData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_sensor_msgs_MultiDOFJointState Data);
};

USTRUCT(BlueprintType)
struct F_geometry_msgs_PoseArray
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "geometry_msgs/PoseArray";
};


UCLASS()
class U_geometry_msgs_PoseArrayAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_PoseArrayAdvertiser * Create_PoseArray_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_geometry_msgs_PoseArray Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_geometry_msgs_PoseArrayDelegate, F_geometry_msgs_PoseArray, Data);

UCLASS()
class U_geometry_msgs_PoseArraySubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_PoseArraySubscriber * Create_PoseArray_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_geometry_msgs_PoseArrayDelegate OnPoseArrayData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_geometry_msgs_PoseArray Data);
};

USTRUCT(BlueprintType)
struct F_sensor_msgs_PointCloud2
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 height;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 width;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		bool is_bigendian;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 point_step;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 row_step;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		bool is_dense;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		TArray<uint8> data;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "sensor_msgs/PointCloud2";
};


UCLASS()
class U_sensor_msgs_PointCloud2Advertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_PointCloud2Advertiser * Create_PointCloud2_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_sensor_msgs_PointCloud2 Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_sensor_msgs_PointCloud2Delegate, F_sensor_msgs_PointCloud2, Data);

UCLASS()
class U_sensor_msgs_PointCloud2Subscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_PointCloud2Subscriber * Create_PointCloud2_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_sensor_msgs_PointCloud2Delegate OnPointCloud2Data;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_sensor_msgs_PointCloud2 Data);
};

USTRUCT(BlueprintType)
struct F_stereo_msgs_DisparityImage
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_sensor_msgs_Image image;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float f;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float T;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_sensor_msgs_RegionOfInterest valid_window;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float min_disparity;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float max_disparity;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float delta_d;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "stereo_msgs/DisparityImage";
};


UCLASS()
class U_stereo_msgs_DisparityImageAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_stereo_msgs_DisparityImageAdvertiser * Create_DisparityImage_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_stereo_msgs_DisparityImage Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_stereo_msgs_DisparityImageDelegate, F_stereo_msgs_DisparityImage, Data);

UCLASS()
class U_stereo_msgs_DisparityImageSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_stereo_msgs_DisparityImageSubscriber * Create_DisparityImage_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_stereo_msgs_DisparityImageDelegate OnDisparityImageData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_stereo_msgs_DisparityImage Data);
};

USTRUCT(BlueprintType)
struct F_geometry_msgs_PoseStamped
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_Pose pose;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "geometry_msgs/PoseStamped";
};


UCLASS()
class U_geometry_msgs_PoseStampedAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_PoseStampedAdvertiser * Create_PoseStamped_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_geometry_msgs_PoseStamped Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_geometry_msgs_PoseStampedDelegate, F_geometry_msgs_PoseStamped, Data);

UCLASS()
class U_geometry_msgs_PoseStampedSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_PoseStampedSubscriber * Create_PoseStamped_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_geometry_msgs_PoseStampedDelegate OnPoseStampedData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_geometry_msgs_PoseStamped Data);
};

USTRUCT(BlueprintType)
struct F_sensor_msgs_CameraInfo
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 height;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 width;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		FString distortion_model;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 binning_x;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 binning_y;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_sensor_msgs_RegionOfInterest roi;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		TArray<float> D;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "sensor_msgs/CameraInfo";
};


UCLASS()
class U_sensor_msgs_CameraInfoAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_CameraInfoAdvertiser * Create_CameraInfo_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_sensor_msgs_CameraInfo Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_sensor_msgs_CameraInfoDelegate, F_sensor_msgs_CameraInfo, Data);

UCLASS()
class U_sensor_msgs_CameraInfoSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_CameraInfoSubscriber * Create_CameraInfo_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_sensor_msgs_CameraInfoDelegate OnCameraInfoData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_sensor_msgs_CameraInfo Data);
};

USTRUCT(BlueprintType)
struct F_sensor_msgs_JointState
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "sensor_msgs/JointState";
};


UCLASS()
class U_sensor_msgs_JointStateAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_JointStateAdvertiser * Create_JointState_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_sensor_msgs_JointState Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_sensor_msgs_JointStateDelegate, F_sensor_msgs_JointState, Data);

UCLASS()
class U_sensor_msgs_JointStateSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_JointStateSubscriber * Create_JointState_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_sensor_msgs_JointStateDelegate OnJointStateData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_sensor_msgs_JointState Data);
};

USTRUCT(BlueprintType)
struct F_geometry_msgs_Vector3Stamped
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_Vector3 vector;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "geometry_msgs/Vector3Stamped";
};


UCLASS()
class U_geometry_msgs_Vector3StampedAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_Vector3StampedAdvertiser * Create_Vector3Stamped_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_geometry_msgs_Vector3Stamped Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_geometry_msgs_Vector3StampedDelegate, F_geometry_msgs_Vector3Stamped, Data);

UCLASS()
class U_geometry_msgs_Vector3StampedSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_Vector3StampedSubscriber * Create_Vector3Stamped_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_geometry_msgs_Vector3StampedDelegate OnVector3StampedData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_geometry_msgs_Vector3Stamped Data);
};

USTRUCT(BlueprintType)
struct F_sensor_msgs_MultiEchoLaserScan
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float angle_min;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float angle_max;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float angle_increment;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float time_increment;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float scan_time;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float range_min;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float range_max;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		TArray<F_sensor_msgs_LaserEcho> ranges;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		TArray<F_sensor_msgs_LaserEcho> intensities;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "sensor_msgs/MultiEchoLaserScan";
};


UCLASS()
class U_sensor_msgs_MultiEchoLaserScanAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_MultiEchoLaserScanAdvertiser * Create_MultiEchoLaserScan_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_sensor_msgs_MultiEchoLaserScan Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_sensor_msgs_MultiEchoLaserScanDelegate, F_sensor_msgs_MultiEchoLaserScan, Data);

UCLASS()
class U_sensor_msgs_MultiEchoLaserScanSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_MultiEchoLaserScanSubscriber * Create_MultiEchoLaserScan_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_sensor_msgs_MultiEchoLaserScanDelegate OnMultiEchoLaserScanData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_sensor_msgs_MultiEchoLaserScan Data);
};

USTRUCT(BlueprintType)
struct F_sensor_msgs_RelativeHumidity
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float relative_humidity;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float variance;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "sensor_msgs/RelativeHumidity";
};


UCLASS()
class U_sensor_msgs_RelativeHumidityAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_RelativeHumidityAdvertiser * Create_RelativeHumidity_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_sensor_msgs_RelativeHumidity Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_sensor_msgs_RelativeHumidityDelegate, F_sensor_msgs_RelativeHumidity, Data);

UCLASS()
class U_sensor_msgs_RelativeHumiditySubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_RelativeHumiditySubscriber * Create_RelativeHumidity_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_sensor_msgs_RelativeHumidityDelegate OnRelativeHumidityData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_sensor_msgs_RelativeHumidity Data);
};

USTRUCT(BlueprintType)
struct F_trajectory_msgs_JointTrajectory
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "trajectory_msgs/JointTrajectory";
};


UCLASS()
class U_trajectory_msgs_JointTrajectoryAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_trajectory_msgs_JointTrajectoryAdvertiser * Create_JointTrajectory_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_trajectory_msgs_JointTrajectory Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_trajectory_msgs_JointTrajectoryDelegate, F_trajectory_msgs_JointTrajectory, Data);

UCLASS()
class U_trajectory_msgs_JointTrajectorySubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_trajectory_msgs_JointTrajectorySubscriber * Create_JointTrajectory_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_trajectory_msgs_JointTrajectoryDelegate OnJointTrajectoryData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_trajectory_msgs_JointTrajectory Data);
};

USTRUCT(BlueprintType)
struct F_geometry_msgs_PoseWithCovarianceStamped
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_PoseWithCovariance pose;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "geometry_msgs/PoseWithCovarianceStamped";
};


UCLASS()
class U_geometry_msgs_PoseWithCovarianceStampedAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_PoseWithCovarianceStampedAdvertiser * Create_PoseWithCovarianceStamped_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_geometry_msgs_PoseWithCovarianceStamped Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_geometry_msgs_PoseWithCovarianceStampedDelegate, F_geometry_msgs_PoseWithCovarianceStamped, Data);

UCLASS()
class U_geometry_msgs_PoseWithCovarianceStampedSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_PoseWithCovarianceStampedSubscriber * Create_PoseWithCovarianceStamped_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_geometry_msgs_PoseWithCovarianceStampedDelegate OnPoseWithCovarianceStampedData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_geometry_msgs_PoseWithCovarianceStamped Data);
};

USTRUCT(BlueprintType)
struct F_sensor_msgs_Joy
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		TArray<float> axes;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		TArray<int32> buttons;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "sensor_msgs/Joy";
};


UCLASS()
class U_sensor_msgs_JoyAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_JoyAdvertiser * Create_Joy_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_sensor_msgs_Joy Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_sensor_msgs_JoyDelegate, F_sensor_msgs_Joy, Data);

UCLASS()
class U_sensor_msgs_JoySubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_JoySubscriber * Create_Joy_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_sensor_msgs_JoyDelegate OnJoyData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_sensor_msgs_Joy Data);
};

USTRUCT(BlueprintType)
struct F_geometry_msgs_InertiaStamped
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_Inertia inertia;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "geometry_msgs/InertiaStamped";
};


UCLASS()
class U_geometry_msgs_InertiaStampedAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_InertiaStampedAdvertiser * Create_InertiaStamped_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_geometry_msgs_InertiaStamped Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_geometry_msgs_InertiaStampedDelegate, F_geometry_msgs_InertiaStamped, Data);

UCLASS()
class U_geometry_msgs_InertiaStampedSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_InertiaStampedSubscriber * Create_InertiaStamped_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_geometry_msgs_InertiaStampedDelegate OnInertiaStampedData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_geometry_msgs_InertiaStamped Data);
};

USTRUCT(BlueprintType)
struct F_sensor_msgs_Temperature
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float temperature;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float variance;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "sensor_msgs/Temperature";
};


UCLASS()
class U_sensor_msgs_TemperatureAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_TemperatureAdvertiser * Create_Temperature_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_sensor_msgs_Temperature Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_sensor_msgs_TemperatureDelegate, F_sensor_msgs_Temperature, Data);

UCLASS()
class U_sensor_msgs_TemperatureSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_TemperatureSubscriber * Create_Temperature_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_sensor_msgs_TemperatureDelegate OnTemperatureData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_sensor_msgs_Temperature Data);
};

USTRUCT(BlueprintType)
struct F_trajectory_msgs_MultiDOFJointTrajectory
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "trajectory_msgs/MultiDOFJointTrajectory";
};


UCLASS()
class U_trajectory_msgs_MultiDOFJointTrajectoryAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_trajectory_msgs_MultiDOFJointTrajectoryAdvertiser * Create_MultiDOFJointTrajectory_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_trajectory_msgs_MultiDOFJointTrajectory Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_trajectory_msgs_MultiDOFJointTrajectoryDelegate, F_trajectory_msgs_MultiDOFJointTrajectory, Data);

UCLASS()
class U_trajectory_msgs_MultiDOFJointTrajectorySubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_trajectory_msgs_MultiDOFJointTrajectorySubscriber * Create_MultiDOFJointTrajectory_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_trajectory_msgs_MultiDOFJointTrajectoryDelegate OnMultiDOFJointTrajectoryData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_trajectory_msgs_MultiDOFJointTrajectory Data);
};

USTRUCT(BlueprintType)
struct F_geometry_msgs_WrenchStamped
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_Wrench wrench;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "geometry_msgs/WrenchStamped";
};


UCLASS()
class U_geometry_msgs_WrenchStampedAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_WrenchStampedAdvertiser * Create_WrenchStamped_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_geometry_msgs_WrenchStamped Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_geometry_msgs_WrenchStampedDelegate, F_geometry_msgs_WrenchStamped, Data);

UCLASS()
class U_geometry_msgs_WrenchStampedSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_WrenchStampedSubscriber * Create_WrenchStamped_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_geometry_msgs_WrenchStampedDelegate OnWrenchStampedData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_geometry_msgs_WrenchStamped Data);
};

USTRUCT(BlueprintType)
struct F_sensor_msgs_CompressedImage
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		FString format;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		TArray<uint8> data;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "sensor_msgs/CompressedImage";
};


UCLASS()
class U_sensor_msgs_CompressedImageAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_CompressedImageAdvertiser * Create_CompressedImage_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_sensor_msgs_CompressedImage Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_sensor_msgs_CompressedImageDelegate, F_sensor_msgs_CompressedImage, Data);

UCLASS()
class U_sensor_msgs_CompressedImageSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_CompressedImageSubscriber * Create_CompressedImage_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_sensor_msgs_CompressedImageDelegate OnCompressedImageData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_sensor_msgs_CompressedImage Data);
};

USTRUCT(BlueprintType)
struct F_sensor_msgs_JoyFeedback
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		uint8 type;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		uint8 id;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float intensity;
		
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Robot OS")
		uint8 CONSTANT_TYPE_LED = 0;
		
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Robot OS")
		uint8 CONSTANT_TYPE_RUMBLE = 1;
		
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Robot OS")
		uint8 CONSTANT_TYPE_BUZZER = 2;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "sensor_msgs/JoyFeedback";
};


UCLASS()
class U_sensor_msgs_JoyFeedbackAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_JoyFeedbackAdvertiser * Create_JoyFeedback_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_sensor_msgs_JoyFeedback Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_sensor_msgs_JoyFeedbackDelegate, F_sensor_msgs_JoyFeedback, Data);

UCLASS()
class U_sensor_msgs_JoyFeedbackSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_JoyFeedbackSubscriber * Create_JoyFeedback_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_sensor_msgs_JoyFeedbackDelegate OnJoyFeedbackData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_sensor_msgs_JoyFeedback Data);
};

USTRUCT(BlueprintType)
struct F_geometry_msgs_QuaternionStamped
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_geometry_msgs_Quaternion quaternion;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "geometry_msgs/QuaternionStamped";
};


UCLASS()
class U_geometry_msgs_QuaternionStampedAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_QuaternionStampedAdvertiser * Create_QuaternionStamped_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_geometry_msgs_QuaternionStamped Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_geometry_msgs_QuaternionStampedDelegate, F_geometry_msgs_QuaternionStamped, Data);

UCLASS()
class U_geometry_msgs_QuaternionStampedSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_geometry_msgs_QuaternionStampedSubscriber * Create_QuaternionStamped_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_geometry_msgs_QuaternionStampedDelegate OnQuaternionStampedData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_geometry_msgs_QuaternionStamped Data);
};

USTRUCT(BlueprintType)
struct F_nav_msgs_GridCells
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float cell_width;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float cell_height;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "nav_msgs/GridCells";
};


UCLASS()
class U_nav_msgs_GridCellsAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_nav_msgs_GridCellsAdvertiser * Create_GridCells_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_nav_msgs_GridCells Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_nav_msgs_GridCellsDelegate, F_nav_msgs_GridCells, Data);

UCLASS()
class U_nav_msgs_GridCellsSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_nav_msgs_GridCellsSubscriber * Create_GridCells_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_nav_msgs_GridCellsDelegate OnGridCellsData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_nav_msgs_GridCells Data);
};

USTRUCT(BlueprintType)
struct F_sensor_msgs_TimeReference
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		int32 time_ref;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		FString source;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "sensor_msgs/TimeReference";
};


UCLASS()
class U_sensor_msgs_TimeReferenceAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_TimeReferenceAdvertiser * Create_TimeReference_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_sensor_msgs_TimeReference Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_sensor_msgs_TimeReferenceDelegate, F_sensor_msgs_TimeReference, Data);

UCLASS()
class U_sensor_msgs_TimeReferenceSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_TimeReferenceSubscriber * Create_TimeReference_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_sensor_msgs_TimeReferenceDelegate OnTimeReferenceData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_sensor_msgs_TimeReference Data);
};

USTRUCT(BlueprintType)
struct F_sensor_msgs_NavSatFix
{
	GENERATED_USTRUCT_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_std_msgs_Header header;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		F_sensor_msgs_NavSatStatus status;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float latitude;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float longitude;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		float altitude;
		
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Robot OS")
		uint8 position_covariance_type;
		
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Robot OS")
		uint8 CONSTANT_COVARIANCE_TYPE_UNKNOWN = 0;
		
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Robot OS")
		uint8 CONSTANT_COVARIANCE_TYPE_APPROXIMATED = 1;
		
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Robot OS")
		uint8 CONSTANT_COVARIANCE_TYPE_DIAGONAL_KNOWN = 2;
		
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Robot OS")
		uint8 CONSTANT_COVARIANCE_TYPE_KNOWN = 3;
		
    

	rapidjson::Value Serialization(rapidjson::Document & d);
	void Unserialization(rapidjson::Value & v);

	std::string TypeName = "sensor_msgs/NavSatFix";
};


UCLASS()
class U_sensor_msgs_NavSatFixAdvertiser : public UAdvertiser
{

	GENERATED_UCLASS_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_NavSatFixAdvertiser * Create_NavSatFix_Advertiser(FString TopicName);

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	void Publish(F_sensor_msgs_NavSatFix Data);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F_sensor_msgs_NavSatFixDelegate, F_sensor_msgs_NavSatFix, Data);

UCLASS()
class U_sensor_msgs_NavSatFixSubscriber : public USubscriber
{
	GENERATED_UCLASS_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	static U_sensor_msgs_NavSatFixSubscriber * Create_NavSatFix_Subscriber(FString _TopicName);

	virtual void ProccessMsg(rapidjson::Value & obj);

	UPROPERTY(BlueprintAssignable, Category = "Robot OS")
	F_sensor_msgs_NavSatFixDelegate OnNavSatFixData;

	UFUNCTION(BlueprintCallable, Category = "Robot OS")
	virtual void OnRecieve(F_sensor_msgs_NavSatFix Data);
};


